import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
;
;
;
;
export class MaterialgrammiService {
    constructor() {
        this.widgets = [];
        this.collapse = [];
        this.dropdown = [];
        this.megamenu = [];
        this.modal = [];
        this.overlay = [];
        this.wizard = [];
        this.slideshow = [];
        this.offcanvas = [];
        this.tab = [];
    }
    makeid(length, str) {
        str = typeof str == "string" ? str.split(" ").join("") : str;
        var result = '';
        var characters = 'ABCDEFGHIJKLMNOP+QRSTUVWXYZabcdefgh_ijklmnopqrst=uvwxyz0123456789-';
        var charactersLength = characters.length;
        for (var i = 0; i < length; i++) {
            result += characters.charAt(Math.floor(Math.random() *
                charactersLength));
        }
        return result + '-' + str;
    }
    registerTab(id, components, active) {
        this.tab[id] = {
            components,
            active: new BehaviorSubject(active)
        };
        for (let i = 0; i < components.length; i++) {
            this.registerWidget(components[i], "tab", id);
        }
        this.openTab(id, components[0]);
    }
    openTab(id, component_id) {
        this.closeAllTab(id);
        this.openWidget(component_id, "tab", id);
        this.tab[id].active.next(component_id);
    }
    closeAllTab(id) {
        if (this.tab && this.tab[id]) {
            for (let i = 0; i < this.tab[id].components.length; i++) {
                this.closeWidget(this.tab[id].components[i], "tab", id);
            }
        }
    }
    watchTab(id) {
        return this.tab[id].active.asObservable();
    }
    registerOffCanvas(id, status) {
        this.offcanvas[id] = {
            id,
            status: new BehaviorSubject(status)
        };
    }
    openCanvas(id) {
        this.offcanvas[id].status.next(true);
    }
    closeCanvas(id) {
        console.log("ID to be closed? ", id, "canvas ==> ", this.offcanvas[id]);
        this.offcanvas[id].status.next(false);
    }
    watchCanvas(id) {
        return this.offcanvas[id].status.asObservable();
    }
    registerSlideshow(id, activePage, play, next, previous, playInterval, timer) {
        var obj = {
            id,
            playInterval,
            timer,
            next: new BehaviorSubject(next),
            previous: new BehaviorSubject(previous),
            active: new BehaviorSubject(activePage),
            play: new BehaviorSubject(play)
        };
        this.slideshow[id] = obj;
    }
    watchSlideshowPlay(id) {
        return this.slideshow[id].play.asObservable();
    }
    watchSlideshowNext(id) {
        return this.slideshow[id].next.asObservable();
    }
    watchSlideshowPrevious(id) {
        return this.slideshow[id].previous.asObservable();
    }
    watchSlideshowActivePage(id) {
        return this.slideshow[id].active.asObservable();
    }
    nextSlide(id) {
        this.slideshow[id].next.next(true);
    }
    previousSlide(id) {
        this.slideshow[id].previous.next(true);
    }
    changeSlidePlay(id, play) {
        this.slideshow[id].play.next(play);
    }
    changeSlideActivePage(id, activePage) {
        this.slideshow[id].active.next(activePage);
    }
    playSlideShow(id) {
        var selected = this.slideshow[id];
        if (selected) {
            if (selected.playInterval) {
                this.pauseSlideshow(id);
            }
            selected.play.next(true);
            var _this = this;
            this.nextSlide(id);
            selected.playInterval = setInterval(() => {
                _this.nextSlide(id);
            }, selected.timer);
        }
    }
    pauseSlideshow(id) {
        var selected = this.slideshow[id];
        if (selected && selected.playInterval) {
            clearInterval(selected.playInterval);
            selected.playInterval = false;
        }
    }
    registerWizard(wizardId, components, active = 0) {
        let next = {};
        let prev = {};
        if (components[active]) {
            next = {
                index: components && components[active + 1] ? active + 1 : active,
                id: components && components[active + 1] ? components[active + 1] : components[active]
            };
            prev = {
                index: components && components[active - 1] ? active - 1 : active,
                id: components && components[active - 1] ? components[active - 1] : components[active]
            };
        }
        else {
            // defaults
            active = 0;
            next = {
                index: components && components[1] ? 1 : 0,
                id: components && components[1] ? components[1] : components[0]
            };
            prev = {
                index: 0,
                id: components[0]
            };
        }
        this.wizard[wizardId] = {
            active: new BehaviorSubject(0),
            on: active,
            completed: new BehaviorSubject(false),
            next,
            prev,
            components
        };
        for (let i = 0; i < components.length; i++) {
            this.registerWidget(components[i], "wizard", wizardId);
        }
        this.openWidget(components[0], "wizard", wizardId);
    }
    wizardNextStep(wizardId) {
        let activateIndex = this.wizard[wizardId].on + 1;
        this.activateWizardStep(wizardId, activateIndex);
    }
    WizardPreviousStep(wizardId) {
        let activateIndex = this.wizard[wizardId].on - 1;
        this.activateWizardStep(wizardId, activateIndex);
    }
    WizardCloseAll(wizardId) {
        if (this.wizard[wizardId] && this.wizard[wizardId].components) {
            for (let i = 0; i < this.wizard[wizardId].components.length; i++) {
                this.closeWidget(this.wizard[wizardId].components[i], "wizard", wizardId);
            }
        }
    }
    activateWizardStep(wizardId, index) {
        if (this.wizard[wizardId].components[index]) {
            if (index >= this.wizard[wizardId].components.length - 1) {
                this.isWizardComplete(wizardId);
            }
            else {
                this.isWizardNotComplete(wizardId);
            }
            this.wizard[wizardId].on = index;
            this.wizard[wizardId].prev.index = this.wizard[wizardId].components[index - 1] ? index - 1 : index;
            this.wizard[wizardId].next.index = this.wizard[wizardId].components[index + 1] ? index + 1 : index;
            this.wizard[wizardId].prev.id = this.wizard[wizardId].components[index - 1] ?
                this.wizard[wizardId].components[index - 1] : this.wizard[wizardId].components[index];
            this.wizard[wizardId].next.id = this.wizard[wizardId].components[index + 1] ?
                this.wizard[wizardId].components[index + 1] : this.wizard[wizardId].components[index];
            ;
            this.WizardCloseAll(wizardId);
            this.openWidget(this.wizard[wizardId].components[index], "wizard", wizardId);
            this.watchWidget(this.wizard[wizardId].components[index], "wizard", wizardId).subscribe((data) => {
                if (data) {
                    this.wizard[wizardId].active.next(index);
                }
            });
        }
    }
    isWizardComplete(wizardId) {
        this.wizard[wizardId].completed.next(true);
    }
    isWizardNotComplete(wizardId) {
        this.wizard[wizardId].completed.next(false);
    }
    watchWizardActive(wizardId) {
        return this.wizard[wizardId].active.asObservable();
    }
    watchWizardCompleted(wizardId) {
        return this.wizard[wizardId].completed.asObservable();
    }
    registerOverlay(id, status) {
        this.overlay[id] = {
            id,
            status: new BehaviorSubject(status)
        };
    }
    openOverlay(id) {
        console.log("Overlay?", this.overlay);
        this.overlay[id].status.next(true);
    }
    closeOverlay(id) {
        this.overlay[id].status.next(false);
    }
    watchOverlay(id) {
        return this.overlay[id].status.asObservable();
    }
    registerModal(id, status) {
        this.modal[id] = {
            id,
            status: new BehaviorSubject(status)
        };
    }
    openModal(id) {
        this.modal[id].status.next(true);
    }
    closeModal(id) {
        this.modal[id].status.next(false);
    }
    watchModal(id) {
        return this.modal[id].status.asObservable();
    }
    registerDropDown(id, status) {
        this.dropdown[id] = {
            id,
            status: new BehaviorSubject(status)
        };
    }
    openDropDown(id) {
        this.dropdown[id].status.next(true);
    }
    closeDropDown(id) {
        this.dropdown[id].status.next(false);
    }
    watchDropDown(id) {
        return this.dropdown[id].status.asObservable();
    }
    registerCollapse(id, status) {
        this.collapse[id] = {
            id,
            status: new BehaviorSubject(status)
        };
    }
    openCollapse(id) {
        this.collapse[id].status.next(true);
    }
    closeCollapse(id) {
        this.collapse[id].status.next(false);
    }
    watchCollapse(id) {
        return this.collapse[id].status.asObservable();
    }
    getWidgetId(id, type, parent_id) {
        return id + '_' + type + '_' + parent_id;
    }
    widgetExists(id, parent_type, parent_id) {
        return this.widgets[this.getWidgetId(id, parent_type, parent_id)] ? true : false;
    }
    registerWidget(id, parent_type, parent_id, options = {}) {
        let mywidgetid = this.getWidgetId(id, parent_type, parent_id);
        this.widgets[mywidgetid] = {
            id,
            type: parent_type,
            parent_id: parent_id,
            options: new BehaviorSubject(options),
            status: new BehaviorSubject(false)
        };
    }
    openWidget(id, parent_type, parent_id) {
        let mywidgetid = this.getWidgetId(id, parent_type, parent_id);
        if (this.widgets && this.widgets[mywidgetid]) {
            this.widgets[mywidgetid].status.next(true);
        }
    }
    closeWidget(id, parent_type, parent_id) {
        let mywidgetid = this.getWidgetId(id, parent_type, parent_id);
        if (this.widgets && this.widgets[mywidgetid]) {
            this.widgets[mywidgetid].status.next(false);
        }
    }
    closeAllParentWidgets(parent_type, parent_id) {
        let allWidgetIds = Object.keys(this.widgets);
        for (let i = 0; i < allWidgetIds.length; i++) {
            if (this.widgets[allWidgetIds[i]].type == parent_type && this.widgets[allWidgetIds[i]].parent_id == parent_id) {
                this.closeWidget(this.widgets[allWidgetIds[i]].id, parent_type, parent_id);
            }
        }
    }
    watchWidget(id, parent_type, parent_id) {
        return this.widgets[this.getWidgetId(id, parent_type, parent_id)].status.asObservable();
    }
    watchOptions(id, parent_type, parent_id) {
        return this.widgets[this.getWidgetId(id, parent_type, parent_id)].options.asObservable();
    }
    registerMegaMenu(id, links) {
        this.megamenu[id] = {
            id,
            active: new BehaviorSubject("")
        };
        for (let i = 0; i < links.length; i++) {
            this.registerWidget(links[i], "megamenu", id);
        }
    }
    watchMegaMenu(id) {
        return this.megamenu[id].active.asObservable();
    }
    openMegaMenu(id, targetid) {
        this.megamenu[id].active.next(targetid);
        if (this.widgetExists(targetid, "megamenu", id)) {
            this.closeMegaMenu(id);
            this.openWidget(targetid, "megamenu", id);
        }
    }
    closeMegaMenu(id) {
        this.closeAllParentWidgets("megamenu", id);
        this.megamenu[id].active.next(false);
    }
    fallbackCopyTextToClipboard(text) {
        var textArea = document.createElement("textarea");
        textArea.value = text;
        // Avoid scrolling to bottom
        textArea.style.top = "0";
        textArea.style.left = "0";
        textArea.style.position = "fixed";
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        try {
            var successful = document.execCommand('copy');
            var msg = successful ? 'successful' : 'unsuccessful';
            console.log('Fallback: Copying text command was ' + msg);
        }
        catch (err) {
            console.error('Fallback: Oops, unable to copy', err);
        }
        document.body.removeChild(textArea);
    }
    copyToClipboard(text) {
        if (!navigator.clipboard) {
            this.fallbackCopyTextToClipboard(text);
            return;
        }
        navigator.clipboard.writeText(text).then(function () {
            console.log('Async: Copying to clipboard was successful!');
        }, function (err) {
            console.error('Async: Could not copy text: ', err);
        });
    }
}
MaterialgrammiService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: MaterialgrammiService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
MaterialgrammiService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: MaterialgrammiService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: MaterialgrammiService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,