import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
;
;
;
;
export class MaterialgrammiService {
    constructor() {
        this.widgets = [];
        this.collapse = [];
        this.dropdown = [];
        this.megamenu = [];
        this.modal = [];
        this.overlay = [];
        this.wizard = [];
        this.slideshow = [];
        this.offcanvas = [];
        this.tab = [];
    }
    makeid(length, str) {
        str = typeof str == "string" ? str.split(" ").join("") : str;
        var result = '';
        var characters = 'ABCDEFGHIJKLMNOP+QRSTUVWXYZabcdefgh_ijklmnopqrst=uvwxyz0123456789-';
        var charactersLength = characters.length;
        for (var i = 0; i < length; i++) {
            result += characters.charAt(Math.floor(Math.random() *
                charactersLength));
        }
        return result + '-' + str;
    }
    registerTab(id, components, active) {
        this.tab[id] = {
            components,
            active: new BehaviorSubject(active)
        };
        for (let i = 0; i < components.length; i++) {
            this.registerWidget(components[i], "tab", id);
        }
        this.openTab(id, components[0]);
    }
    openTab(id, component_id) {
        this.closeAllTab(id);
        this.openWidget(component_id, "tab", id);
        this.tab[id].active.next(component_id);
    }
    closeAllTab(id) {
        if (this.tab && this.tab[id]) {
            for (let i = 0; i < this.tab[id].components.length; i++) {
                this.closeWidget(this.tab[id].components[i], "tab", id);
            }
        }
    }
    watchTab(id) {
        return this.tab[id].active.asObservable();
    }
    registerOffCanvas(id, status) {
        this.offcanvas[id] = {
            id,
            status: new BehaviorSubject(status)
        };
    }
    openCanvas(id) {
        this.offcanvas[id].status.next(true);
    }
    closeCanvas(id) {
        console.log("ID to be closed? ", id, "canvas ==> ", this.offcanvas[id]);
        this.offcanvas[id].status.next(false);
    }
    watchCanvas(id) {
        return this.offcanvas[id].status.asObservable();
    }
    registerSlideshow(id, activePage, play, next, previous, playInterval, timer) {
        var obj = {
            id,
            playInterval,
            timer,
            next: new BehaviorSubject(next),
            previous: new BehaviorSubject(previous),
            active: new BehaviorSubject(activePage),
            play: new BehaviorSubject(play)
        };
        this.slideshow[id] = obj;
    }
    watchSlideshowPlay(id) {
        return this.slideshow[id].play.asObservable();
    }
    watchSlideshowNext(id) {
        return this.slideshow[id].next.asObservable();
    }
    watchSlideshowPrevious(id) {
        return this.slideshow[id].previous.asObservable();
    }
    watchSlideshowActivePage(id) {
        return this.slideshow[id].active.asObservable();
    }
    nextSlide(id) {
        this.slideshow[id].next.next(true);
    }
    previousSlide(id) {
        this.slideshow[id].previous.next(true);
    }
    changeSlidePlay(id, play) {
        this.slideshow[id].play.next(play);
    }
    changeSlideActivePage(id, activePage) {
        this.slideshow[id].active.next(activePage);
    }
    playSlideShow(id) {
        var selected = this.slideshow[id];
        if (selected) {
            if (selected.playInterval) {
                this.pauseSlideshow(id);
            }
            selected.play.next(true);
            var _this = this;
            this.nextSlide(id);
            selected.playInterval = setInterval(() => {
                _this.nextSlide(id);
            }, selected.timer);
        }
    }
    pauseSlideshow(id) {
        var selected = this.slideshow[id];
        if (selected && selected.playInterval) {
            clearInterval(selected.playInterval);
            selected.playInterval = false;
        }
    }
    registerWizard(wizardId, components, active = 0) {
        let next = {};
        let prev = {};
        if (components[active]) {
            next = {
                index: components && components[active + 1] ? active + 1 : active,
                id: components && components[active + 1] ? components[active + 1] : components[active]
            };
            prev = {
                index: components && components[active - 1] ? active - 1 : active,
                id: components && components[active - 1] ? components[active - 1] : components[active]
            };
        }
        else {
            // defaults
            active = 0;
            next = {
                index: components && components[1] ? 1 : 0,
                id: components && components[1] ? components[1] : components[0]
            };
            prev = {
                index: 0,
                id: components[0]
            };
        }
        this.wizard[wizardId] = {
            active: new BehaviorSubject(0),
            on: active,
            completed: new BehaviorSubject(false),
            next,
            prev,
            components
        };
        for (let i = 0; i < components.length; i++) {
            this.registerWidget(components[i], "wizard", wizardId);
        }
        this.openWidget(components[0], "wizard", wizardId);
    }
    wizardNextStep(wizardId) {
        let activateIndex = this.wizard[wizardId].on + 1;
        this.activateWizardStep(wizardId, activateIndex);
    }
    WizardPreviousStep(wizardId) {
        let activateIndex = this.wizard[wizardId].on - 1;
        this.activateWizardStep(wizardId, activateIndex);
    }
    WizardCloseAll(wizardId) {
        if (this.wizard[wizardId] && this.wizard[wizardId].components) {
            for (let i = 0; i < this.wizard[wizardId].components.length; i++) {
                this.closeWidget(this.wizard[wizardId].components[i], "wizard", wizardId);
            }
        }
    }
    activateWizardStep(wizardId, index) {
        if (this.wizard[wizardId].components[index]) {
            if (index >= this.wizard[wizardId].components.length - 1) {
                this.isWizardComplete(wizardId);
            }
            else {
                this.isWizardNotComplete(wizardId);
            }
            this.wizard[wizardId].on = index;
            this.wizard[wizardId].prev.index = this.wizard[wizardId].components[index - 1] ? index - 1 : index;
            this.wizard[wizardId].next.index = this.wizard[wizardId].components[index + 1] ? index + 1 : index;
            this.wizard[wizardId].prev.id = this.wizard[wizardId].components[index - 1] ?
                this.wizard[wizardId].components[index - 1] : this.wizard[wizardId].components[index];
            this.wizard[wizardId].next.id = this.wizard[wizardId].components[index + 1] ?
                this.wizard[wizardId].components[index + 1] : this.wizard[wizardId].components[index];
            ;
            this.WizardCloseAll(wizardId);
            this.openWidget(this.wizard[wizardId].components[index], "wizard", wizardId);
            this.watchWidget(this.wizard[wizardId].components[index], "wizard", wizardId).subscribe((data) => {
                if (data) {
                    this.wizard[wizardId].active.next(index);
                }
            });
        }
    }
    isWizardComplete(wizardId) {
        this.wizard[wizardId].completed.next(true);
    }
    isWizardNotComplete(wizardId) {
        this.wizard[wizardId].completed.next(false);
    }
    watchWizardActive(wizardId) {
        return this.wizard[wizardId].active.asObservable();
    }
    watchWizardCompleted(wizardId) {
        return this.wizard[wizardId].completed.asObservable();
    }
    registerOverlay(id, status) {
        this.overlay[id] = {
            id,
            status: new BehaviorSubject(status)
        };
    }
    openOverlay(id) {
        console.log("Overlay?", this.overlay);
        this.overlay[id].status.next(true);
    }
    closeOverlay(id) {
        this.overlay[id].status.next(false);
    }
    watchOverlay(id) {
        return this.overlay[id].status.asObservable();
    }
    registerModal(id, status) {
        this.modal[id] = {
            id,
            status: new BehaviorSubject(status)
        };
    }
    openModal(id) {
        this.modal[id].status.next(true);
    }
    closeModal(id) {
        this.modal[id].status.next(false);
    }
    watchModal(id) {
        return this.modal[id].status.asObservable();
    }
    registerDropDown(id, status) {
        this.dropdown[id] = {
            id,
            status: new BehaviorSubject(status)
        };
    }
    openDropDown(id) {
        this.dropdown[id].status.next(true);
    }
    closeDropDown(id) {
        this.dropdown[id].status.next(false);
    }
    watchDropDown(id) {
        return this.dropdown[id].status.asObservable();
    }
    registerCollapse(id, status) {
        this.collapse[id] = {
            id,
            status: new BehaviorSubject(status)
        };
    }
    openCollapse(id) {
        this.collapse[id].status.next(true);
    }
    closeCollapse(id) {
        this.collapse[id].status.next(false);
    }
    watchCollapse(id) {
        return this.collapse[id].status.asObservable();
    }
    getWidgetId(id, type, parent_id) {
        return id + '_' + type + '_' + parent_id;
    }
    widgetExists(id, parent_type, parent_id) {
        return this.widgets[this.getWidgetId(id, parent_type, parent_id)] ? true : false;
    }
    registerWidget(id, parent_type, parent_id, options = {}) {
        let mywidgetid = this.getWidgetId(id, parent_type, parent_id);
        this.widgets[mywidgetid] = {
            id,
            type: parent_type,
            parent_id: parent_id,
            options: new BehaviorSubject(options),
            status: new BehaviorSubject(false)
        };
    }
    openWidget(id, parent_type, parent_id) {
        let mywidgetid = this.getWidgetId(id, parent_type, parent_id);
        if (this.widgets && this.widgets[mywidgetid]) {
            this.widgets[mywidgetid].status.next(true);
        }
    }
    closeWidget(id, parent_type, parent_id) {
        let mywidgetid = this.getWidgetId(id, parent_type, parent_id);
        if (this.widgets && this.widgets[mywidgetid]) {
            this.widgets[mywidgetid].status.next(false);
        }
    }
    closeAllParentWidgets(parent_type, parent_id) {
        let allWidgetIds = Object.keys(this.widgets);
        for (let i = 0; i < allWidgetIds.length; i++) {
            if (this.widgets[allWidgetIds[i]].type == parent_type && this.widgets[allWidgetIds[i]].parent_id == parent_id) {
                this.closeWidget(this.widgets[allWidgetIds[i]].id, parent_type, parent_id);
            }
        }
    }
    watchWidget(id, parent_type, parent_id) {
        return this.widgets[this.getWidgetId(id, parent_type, parent_id)].status.asObservable();
    }
    watchOptions(id, parent_type, parent_id) {
        return this.widgets[this.getWidgetId(id, parent_type, parent_id)].options.asObservable();
    }
    registerMegaMenu(id, links) {
        this.megamenu[id] = {
            id,
            active: new BehaviorSubject("")
        };
        for (let i = 0; i < links.length; i++) {
            this.registerWidget(links[i], "megamenu", id);
        }
    }
    watchMegaMenu(id) {
        return this.megamenu[id].active.asObservable();
    }
    openMegaMenu(id, targetid) {
        this.megamenu[id].active.next(targetid);
        if (this.widgetExists(targetid, "megamenu", id)) {
            this.closeMegaMenu(id);
            this.openWidget(targetid, "megamenu", id);
        }
    }
    closeMegaMenu(id) {
        this.closeAllParentWidgets("megamenu", id);
        this.megamenu[id].active.next(false);
    }
    fallbackCopyTextToClipboard(text) {
        var textArea = document.createElement("textarea");
        textArea.value = text;
        // Avoid scrolling to bottom
        textArea.style.top = "0";
        textArea.style.left = "0";
        textArea.style.position = "fixed";
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        try {
            var successful = document.execCommand('copy');
            var msg = successful ? 'successful' : 'unsuccessful';
            console.log('Fallback: Copying text command was ' + msg);
        }
        catch (err) {
            console.error('Fallback: Oops, unable to copy', err);
        }
        document.body.removeChild(textArea);
    }
    copyToClipboard(text) {
        if (!navigator.clipboard) {
            this.fallbackCopyTextToClipboard(text);
            return;
        }
        navigator.clipboard.writeText(text).then(function () {
            console.log('Async: Copying to clipboard was successful!');
        }, function (err) {
            console.error('Async: Could not copy text: ', err);
        });
    }
}
MaterialgrammiService.ɵfac = function MaterialgrammiService_Factory(t) { return new (t || MaterialgrammiService)(); };
MaterialgrammiService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: MaterialgrammiService, factory: MaterialgrammiService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(MaterialgrammiService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0ZXJpYWxncmFtbWkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL21hdGVyaWFsZ3JhbW1pL3NyYy9saWIvbWF0ZXJpYWxncmFtbWkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQXVCLE1BQU0sTUFBTSxDQUFDOztBQU8zRCxDQUFDO0FBS0QsQ0FBQztBQU1ELENBQUM7QUEyQ0QsQ0FBQztBQXlCRixNQUFNLE9BQU8scUJBQXFCO0lBYWhDO1FBWFEsWUFBTyxHQUFtQixFQUFFLENBQUM7UUFDN0IsYUFBUSxHQUFxQixFQUFFLENBQUM7UUFDaEMsYUFBUSxHQUFxQixFQUFFLENBQUM7UUFDaEMsYUFBUSxHQUFxQixFQUFFLENBQUM7UUFDaEMsVUFBSyxHQUFrQixFQUFFLENBQUM7UUFDMUIsWUFBTyxHQUFvQixFQUFFLENBQUM7UUFDOUIsV0FBTSxHQUFtQixFQUFFLENBQUM7UUFDNUIsY0FBUyxHQUFzQixFQUFFLENBQUM7UUFDbEMsY0FBUyxHQUFzQixFQUFFLENBQUM7UUFDbEMsUUFBRyxHQUFnQixFQUFFLENBQUM7SUFFZCxDQUFDO0lBRWpCLE1BQU0sQ0FBQyxNQUFjLEVBQUUsR0FBb0I7UUFDekMsR0FBRyxHQUFHLE9BQU8sR0FBRyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUM3RCxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxVQUFVLEdBQUcsb0VBQW9FLENBQUM7UUFDdEYsSUFBSSxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO1FBQ3pDLEtBQUssSUFBSSxDQUFDLEdBQUcs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QUMsU0FBUyxDQUFDLFNBQVMsRUFBRTtZQUN4QixJQUFJLENBQUMsMkJBQTJCLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdkMsT0FBTztTQUNSO1FBQ0QsU0FBUyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkNBQTZDLENBQUMsQ0FBQztRQUM3RCxDQUFDLEVBQUUsVUFBUyxHQUFHO1lBQ2IsT0FBTyxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNyRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7OzBGQWxiVSxxQkFBcUI7MkVBQXJCLHFCQUFxQixXQUFyQixxQkFBcUIsbUJBRnBCLE1BQU07dUZBRVAscUJBQXFCO2NBSGpDLFVBQVU7ZUFBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFdpZGdldCB7XG4gIGlkOiBzdHJpbmcsXG4gIHR5cGU6IHN0cmluZyxcbiAgb3B0aW9ucz86IEJlaGF2aW9yU3ViamVjdDxhbnk+LFxuICBzdGF0dXM6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPlxufTtcblxuZXhwb3J0IGludGVyZmFjZSBBY2NvcmRpb25JdGVtIHtcbiAgLy8gd2lkZ2V0SWRcbiAgaWQ/OiBzdHJpbmdcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWNjb3JkaW9uIHtcbiAgaWQ6IHN0cmluZyxcbiAgaXRlbXM/OiBbQWNjb3JkaW9uSXRlbV0sXG4gIGFjdGl2ZUl0ZW0/OiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj5cbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29sbGFwc2Uge1xuICBpZDogc3RyaW5nLFxuICBzdGF0dXM6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIERyb3Bkb3duIHtcbiAgaWQ6IHN0cmluZyxcbiAgc3RhdHVzOiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBNZWdhTWVudSB7XG4gIGlkOiBzdHJpbmcsXG4gIGFjdGl2ZTogQmVoYXZpb3JTdWJqZWN0PHN0cmluZyB8IGJvb2xlYW4+XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9kYWwge1xuICBpZDogc3RyaW5nLFxuICBzdGF0dXM6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE92ZXJsYXkge1xuICBpZDogc3RyaW5nLFxuICBzdGF0dXM6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPlxufVxuXG5cblxuZXhwb3J0IGludGVyZmFjZSBXaXphcmQge1xuICBpZDogc3RyaW5nLFxuICBhY3RpdmU6IEJlaGF2aW9yU3ViamVjdDxudW1iZXI+LFxuICBvbjogbnVtYmVyLFxuICBjb21wbGV0ZWQ6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPixcbiAgbmV4dDoge1xuICAgIGluZGV4OiBudW1iZXIsXG4gICAgaWQ6IHN0cmluZ1xuICB9LFxuICBwcmV2OiB7XG4gICAgaW5kZXg6IG51bWJlcixcbiAgICBpZDogc3RyaW5nXG4gIH0sXG4gIGNvbXBvbmVudHM6IFtzdHJpbmddXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIFNsaWRlc2hvdyB7XG4gIGlkOiBzdHJpbmcsXG4gIHBsYXlJbnRlcnZhbDogYW55LFxuICB0aW1lcjogbnVtYmVyLFxuICBuZXh0OiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4sXG4gIHByZXZpb3VzOiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4sXG4gIGFjdGl2ZTogQmVoYXZpb3JTdWJqZWN0PG51bWJlcj4sXG4gIHBsYXk6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9mZkNhbnZhcyB7XG4gIGlkOiBzdHJpbmcsXG4gIHN0YXR1czogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGFiIHtcbiAgYWN0aXZlOiBCZWhhdmlvclN1YmplY3Q8c3RyaW5nPixcbiAgY29tcG9uZW50czogW3N0cmluZ11cbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTWF0ZXJpYWxncmFtbWlTZXJ2aWNlIHtcblxuICBwcml2YXRlIHdpZGdldHM6IFtXaWRnZXRdIHwgYW55ID0gW107XG4gIHByaXZhdGUgY29sbGFwc2U6IFtDb2xsYXBzZV0gfCBhbnkgPSBbXTtcbiAgcHJpdmF0ZSBkcm9wZG93bjogW0Ryb3Bkb3duXSB8IGFueSA9IFtdO1xuICBwcml2YXRlIG1lZ2FtZW51OiBbTWVnYU1lbnVdIHwgYW55ID0gW107XG4gIHByaXZhdGUgbW9kYWw6IFtNb2RhbF0gfCBhbnkgPSBbXTtcbiAgcHJpdmF0ZSBvdmVybGF5OiBbT3ZlcmxheV0gfCBhbnkgPSBbXTtcbiAgcHJpdmF0ZSB3aXphcmQ6IFtXaXphcmRdIHwgYW55ID0gW107XG4gIHByaXZhdGUgc2xpZGVzaG93OiBbU2xpZGVzaG93XSB8IGFueSA9IFtdO1xuICBwcml2YXRlIG9mZmNhbnZhczogW09mZkNhbnZhc10gfCBhbnkgPSBbXTtcbiAgcHJpdmF0ZSB0YWI6IFtUYWJdIHwgYW55ID0gW107XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBtYWtlaWQobGVuZ3RoOiBudW1iZXIsIHN0cjogc3RyaW5nIHwgbnVtYmVyKSB7XG4gICAgc3RyID0gdHlwZW9mIHN0ciA9PSBcInN0cmluZ1wiID8gc3RyLnNwbGl0KFwiIFwiKS5qb2luKFwiXCIpIDogc3RyO1xuICAgIHZhciByZXN1bHQgPSAnJztcbiAgICB2YXIgY2hhcmFjdGVycyA9ICdBQkNERUZHSElKS0xNTk9QK1FSU1RVVldYWVphYmNkZWZnaF9pamtsbW5vcHFyc3Q9dXZ3eHl6MDEyMzQ1Njc4OS0nO1xuICAgIHZhciBjaGFyYWN0ZXJzTGVuZ3RoID0gY2hhcmFjdGVycy5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0ICs9IGNoYXJhY3RlcnMuY2hhckF0KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqXG4gICAgICAgIGNoYXJhY3RlcnNMZW5ndGgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdCArICctJyArIHN0cjtcbiAgfVxuXG4gIHJlZ2lzdGVyVGFiKGlkOiBzdHJpbmcsIGNvbXBvbmVudHM6IGFueSwgYWN0aXZlOiBzdHJpbmcpIHtcbiAgICB0aGlzLnRhYltpZF0gPSB7XG4gICAgICBjb21wb25lbnRzLFxuICAgICAgYWN0aXZlOiBuZXcgQmVoYXZpb3JTdWJqZWN0KGFjdGl2ZSlcbiAgICB9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29tcG9uZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5yZWdpc3RlcldpZGdldChjb21wb25lbnRzW2ldLCBcInRhYlwiLCBpZCk7XG4gICAgfVxuICAgIHRoaXMub3BlblRhYihpZCwgY29tcG9uZW50c1swXSk7XG4gIH1cblxuICBvcGVuVGFiKGlkOiBzdHJpbmcsIGNvbXBvbmVudF9pZDogc3RyaW5nKSB7XG4gICAgdGhpcy5jbG9zZUFsbFRhYihpZCk7XG4gICAgdGhpcy5vcGVuV2lkZ2V0KGNvbXBvbmVudF9pZCwgXCJ0YWJcIiwgaWQpO1xuICAgIHRoaXMudGFiW2lkXS5hY3RpdmUubmV4dChjb21wb25lbnRfaWQpO1xuICB9XG5cbiAgY2xvc2VBbGxUYWIoaWQ6IHN0cmluZykge1xuICAgIGlmICh0aGlzLnRhYiAmJiB0aGlzLnRhYltpZF0pIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy50YWJbaWRdLmNvbXBvbmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5jbG9zZVdpZGdldCh0aGlzLnRhYltpZF0uY29tcG9uZW50c1tpXSwgXCJ0YWJcIiwgaWQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHdhdGNoVGFiKGlkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy50YWJbaWRdLmFjdGl2ZS5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIHJlZ2lzdGVyT2ZmQ2FudmFzKGlkOiBzdHJpbmcsIHN0YXR1czogYm9vbGVhbikge1xuICAgIHRoaXMub2ZmY2FudmFzW2lkXSA9IHtcbiAgICAgIGlkLFxuICAgICAgc3RhdHVzOiBuZXcgQmVoYXZpb3JTdWJqZWN0KHN0YXR1cylcbiAgICB9O1xuICB9XG5cbiAgb3BlbkNhbnZhcyhpZDogc3RyaW5nKSB7XG4gICAgdGhpcy5vZmZjYW52YXNbaWRdLnN0YXR1cy5uZXh0KHRydWUpO1xuICB9XG5cbiAgY2xvc2VDYW52YXMoaWQ6IHN0cmluZykge1xuICAgIGNvbnNvbGUubG9nKFwiSUQgdG8gYmUgY2xvc2VkPyBcIiwgaWQsIFwiY2FudmFzID09PiBcIiwgdGhpcy5vZmZjYW52YXNbaWRdKTtcbiAgICB0aGlzLm9mZmNhbnZhc1tpZF0uc3RhdHVzLm5leHQoZmFsc2UpO1xuICB9XG5cbiAgd2F0Y2hDYW52YXMoaWQ6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLm9mZmNhbnZhc1tpZF0uc3RhdHVzLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cblxuICByZWdpc3RlclNsaWRlc2hvdyhpZDogc3RyaW5nLCBhY3RpdmVQYWdlOiBudW1iZXIsIHBsYXk6IGJvb2xlYW4sIG5leHQ6IGJvb2xlYW4sIHByZXZpb3VzOiBib29sZWFuLCBwbGF5SW50ZXJ2YWw6IGFueSwgdGltZXI6IG51bWJlcikge1xuICAgIHZhciBvYmo6IGFueSA9IHtcbiAgICAgIGlkLFxuICAgICAgcGxheUludGVydmFsLFxuICAgICAgdGltZXIsXG4gICAgICBuZXh0OiBuZXcgQmVoYXZpb3JTdWJqZWN0KG5leHQpLFxuICAgICAgcHJldmlvdXM6IG5ldyBCZWhhdmlvclN1YmplY3QocHJldmlvdXMpLFxuICAgICAgYWN0aXZlOiBuZXcgQmVoYXZpb3JTdWJqZWN0KGFjdGl2ZVBhZ2UpLFxuICAgICAgcGxheTogbmV3IEJlaGF2aW9yU3ViamVjdChwbGF5KVxuICAgIH07XG4gICAgdGhpcy5zbGlkZXNob3dbaWRdID0gb2JqO1xuICB9XG5cbiAgd2F0Y2hTbGlkZXNob3dQbGF5KGlkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5zbGlkZXNob3dbaWRdLnBsYXkuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICB3YXRjaFNsaWRlc2hvd05leHQoaWQ6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLnNsaWRlc2hvd1tpZF0ubmV4dC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIHdhdGNoU2xpZGVzaG93UHJldmlvdXMoaWQ6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLnNsaWRlc2hvd1tpZF0ucHJldmlvdXMuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICB3YXRjaFNsaWRlc2hvd0FjdGl2ZVBhZ2UoaWQ6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLnNsaWRlc2hvd1tpZF0uYWN0aXZlLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgbmV4dFNsaWRlKGlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNsaWRlc2hvd1tpZF0ubmV4dC5uZXh0KHRydWUpO1xuICB9XG5cbiAgcHJldmlvdXNTbGlkZShpZDogc3RyaW5nKSB7XG4gICAgdGhpcy5zbGlkZXNob3dbaWRdLnByZXZpb3VzLm5leHQodHJ1ZSk7XG4gIH1cblxuICBjaGFuZ2VTbGlkZVBsYXkoaWQ6IHN0cmluZywgcGxheTogYm9vbGVhbikge1xuICAgIHRoaXMuc2xpZGVzaG93W2lkXS5wbGF5Lm5leHQocGxheSk7XG4gIH1cblxuICBjaGFuZ2VTbGlkZUFjdGl2ZVBhZ2UoaWQ6IHN0cmluZywgYWN0aXZlUGFnZTogbnVtYmVyKSB7XG4gICAgdGhpcy5zbGlkZXNob3dbaWRdLmFjdGl2ZS5uZXh0KGFjdGl2ZVBhZ2UpO1xuICB9XG5cbiAgcGxheVNsaWRlU2hvdyhpZDogc3RyaW5nKSB7XG4gICAgdmFyIHNlbGVjdGVkID0gdGhpcy5zbGlkZXNob3dbaWRdO1xuICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgaWYgKHNlbGVjdGVkLnBsYXlJbnRlcnZhbCkge1xuICAgICAgICB0aGlzLnBhdXNlU2xpZGVzaG93KGlkKTtcbiAgICAgIH1cbiAgICAgIHNlbGVjdGVkLnBsYXkubmV4dCh0cnVlKTtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB0aGlzLm5leHRTbGlkZShpZCk7XG4gICAgICBzZWxlY3RlZC5wbGF5SW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIF90aGlzLm5leHRTbGlkZShpZCk7XG4gICAgICB9LCBzZWxlY3RlZC50aW1lcik7XG4gICAgfVxuICB9XG5cbiAgcGF1c2VTbGlkZXNob3coaWQ6IHN0cmluZykge1xuICAgIHZhciBzZWxlY3RlZCA9IHRoaXMuc2xpZGVzaG93W2lkXTtcbiAgICBpZiAoc2VsZWN0ZWQgJiYgc2VsZWN0ZWQucGxheUludGVydmFsKSB7XG4gICAgICBjbGVhckludGVydmFsKHNlbGVjdGVkLnBsYXlJbnRlcnZhbCk7XG4gICAgICBzZWxlY3RlZC5wbGF5SW50ZXJ2YWwgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZWdpc3RlcldpemFyZCh3aXphcmRJZDogc3RyaW5nLCBjb21wb25lbnRzOiBhbnksIGFjdGl2ZSA9IDApIHtcbiAgICBsZXQgbmV4dCA9IHt9O1xuICAgIGxldCBwcmV2ID0ge307XG4gICAgaWYgKGNvbXBvbmVudHNbYWN0aXZlXSkge1xuICAgICAgbmV4dCA9IHtcbiAgICAgICAgaW5kZXg6IGNvbXBvbmVudHMgJiYgY29tcG9uZW50c1thY3RpdmUgKyAxXSA/IGFjdGl2ZSArIDEgOiBhY3RpdmUsXG4gICAgICAgIGlkOiBjb21wb25lbnRzICYmIGNvbXBvbmVudHNbYWN0aXZlICsgMV0gPyBjb21wb25lbnRzW2FjdGl2ZSArIDFdIDogY29tcG9uZW50c1thY3RpdmVdXG4gICAgICB9O1xuICAgICAgcHJldiA9IHtcbiAgICAgICAgaW5kZXg6IGNvbXBvbmVudHMgJiYgY29tcG9uZW50c1thY3RpdmUgLSAxXSA/IGFjdGl2ZSAtIDEgOiBhY3RpdmUsXG4gICAgICAgIGlkOiBjb21wb25lbnRzICYmIGNvbXBvbmVudHNbYWN0aXZlIC0gMV0gPyBjb21wb25lbnRzW2FjdGl2ZSAtIDFdIDogY29tcG9uZW50c1thY3RpdmVdXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBkZWZhdWx0c1xuICAgICAgYWN0aXZlID0gMDtcbiAgICAgIG5leHQgPSB7XG4gICAgICAgIGluZGV4OiBjb21wb25lbnRzICYmIGNvbXBvbmVudHNbMV0gPyAxIDogMCxcbiAgICAgICAgaWQ6IGNvbXBvbmVudHMgJiYgY29tcG9uZW50c1sxXSA/IGNvbXBvbmVudHNbMV0gOiBjb21wb25lbnRzWzBdXG4gICAgICB9O1xuICAgICAgcHJldiA9IHtcbiAgICAgICAgaW5kZXg6IDAsXG4gICAgICAgIGlkOiBjb21wb25lbnRzWzBdXG4gICAgICB9O1xuICAgIH1cblxuICAgIHRoaXMud2l6YXJkW3dpemFyZElkXSA9IHtcbiAgICAgIGFjdGl2ZTogbmV3IEJlaGF2aW9yU3ViamVjdCgwKSxcbiAgICAgIG9uOiBhY3RpdmUsXG4gICAgICBjb21wbGV0ZWQ6IG5ldyBCZWhhdmlvclN1YmplY3QoZmFsc2UpLFxuICAgICAgbmV4dCxcbiAgICAgIHByZXYsXG4gICAgICBjb21wb25lbnRzXG4gICAgfTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29tcG9uZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5yZWdpc3RlcldpZGdldChjb21wb25lbnRzW2ldLCBcIndpemFyZFwiLCB3aXphcmRJZCk7XG4gICAgfVxuXG4gICAgdGhpcy5vcGVuV2lkZ2V0KGNvbXBvbmVudHNbMF0sIFwid2l6YXJkXCIsIHdpemFyZElkKTtcbiAgfVxuXG4gIHdpemFyZE5leHRTdGVwKHdpemFyZElkOiBzdHJpbmcpIHtcbiAgICBsZXQgYWN0aXZhdGVJbmRleCA9IHRoaXMud2l6YXJkW3dpemFyZElkXS5vbiArIDE7XG4gICAgdGhpcy5hY3RpdmF0ZVdpemFyZFN0ZXAod2l6YXJkSWQsIGFjdGl2YXRlSW5kZXgpO1xuICB9XG5cbiAgV2l6YXJkUHJldmlvdXNTdGVwKHdpemFyZElkOiBzdHJpbmcpIHtcbiAgICBsZXQgYWN0aXZhdGVJbmRleCA9IHRoaXMud2l6YXJkW3dpemFyZElkXS5vbiAtIDE7XG4gICAgdGhpcy5hY3RpdmF0ZVdpemFyZFN0ZXAod2l6YXJkSWQsIGFjdGl2YXRlSW5kZXgpO1xuICB9XG5cbiAgV2l6YXJkQ2xvc2VBbGwod2l6YXJkSWQ6IHN0cmluZykge1xuICAgIGlmICh0aGlzLndpemFyZFt3aXphcmRJZF0gJiYgdGhpcy53aXphcmRbd2l6YXJkSWRdLmNvbXBvbmVudHMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy53aXphcmRbd2l6YXJkSWRdLmNvbXBvbmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5jbG9zZVdpZGdldCh0aGlzLndpemFyZFt3aXphcmRJZF0uY29tcG9uZW50c1tpXSwgXCJ3aXphcmRcIiwgd2l6YXJkSWQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFjdGl2YXRlV2l6YXJkU3RlcCh3aXphcmRJZDogc3RyaW5nLCBpbmRleDogbnVtYmVyKSB7XG5cbiAgICBpZiAodGhpcy53aXphcmRbd2l6YXJkSWRdLmNvbXBvbmVudHNbaW5kZXhdKSB7XG4gICAgICBpZihpbmRleCA+PSB0aGlzLndpemFyZFt3aXphcmRJZF0uY29tcG9uZW50cy5sZW5ndGggLTEpe1xuICAgICAgICB0aGlzLmlzV2l6YXJkQ29tcGxldGUod2l6YXJkSWQpO1xuICAgICAgfWVsc2Uge1xuICAgICAgICB0aGlzLmlzV2l6YXJkTm90Q29tcGxldGUod2l6YXJkSWQpO1xuICAgICAgfVxuICAgICAgdGhpcy53aXphcmRbd2l6YXJkSWRdLm9uID0gaW5kZXg7XG4gICAgICB0aGlzLndpemFyZFt3aXphcmRJZF0ucHJldi5pbmRleCA9IHRoaXMud2l6YXJkW3dpemFyZElkXS5jb21wb25lbnRzW2luZGV4IC0gMV0gPyBpbmRleCAtIDEgOiBpbmRleDtcbiAgICAgIHRoaXMud2l6YXJkW3dpemFyZElkXS5uZXh0LmluZGV4ID0gdGhpcy53aXphcmRbd2l6YXJkSWRdLmNvbXBvbmVudHNbaW5kZXggKyAxXSA/IGluZGV4ICsgMSA6IGluZGV4O1xuICAgICAgdGhpcy53aXphcmRbd2l6YXJkSWRdLnByZXYuaWQgPSB0aGlzLndpemFyZFt3aXphcmRJZF0uY29tcG9uZW50c1tpbmRleCAtIDFdID9cbiAgICAgICAgdGhpcy53aXphcmRbd2l6YXJkSWRdLmNvbXBvbmVudHNbaW5kZXggLSAxXSA6IHRoaXMud2l6YXJkW3dpemFyZElkXS5jb21wb25lbnRzW2luZGV4XTtcbiAgICAgIHRoaXMud2l6YXJkW3dpemFyZElkXS5uZXh0LmlkID0gdGhpcy53aXphcmRbd2l6YXJkSWRdLmNvbXBvbmVudHNbaW5kZXggKyAxXSA/XG4gICAgICAgIHRoaXMud2l6YXJkW3dpemFyZElkXS5jb21wb25lbnRzW2luZGV4ICsgMV0gOiB0aGlzLndpemFyZFt3aXphcmRJZF0uY29tcG9uZW50c1tpbmRleF07O1xuICAgICAgdGhpcy5XaXphcmRDbG9zZUFsbCh3aXphcmRJZCk7XG4gICAgICB0aGlzLm9wZW5XaWRnZXQodGhpcy53aXphcmRbd2l6YXJkSWRdLmNvbXBvbmVudHNbaW5kZXhdLCBcIndpemFyZFwiLCB3aXphcmRJZCk7XG4gICAgICB0aGlzLndhdGNoV2lkZ2V0KHRoaXMud2l6YXJkW3dpemFyZElkXS5jb21wb25lbnRzW2luZGV4XSwgXCJ3aXphcmRcIiwgd2l6YXJkSWQpLnN1YnNjcmliZSgoZGF0YTogYW55KSA9PiB7XG4gICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgdGhpcy53aXphcmRbd2l6YXJkSWRdLmFjdGl2ZS5uZXh0KGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgaXNXaXphcmRDb21wbGV0ZSh3aXphcmRJZDogc3RyaW5nKSB7XG4gICAgdGhpcy53aXphcmRbd2l6YXJkSWRdLmNvbXBsZXRlZC5uZXh0KHRydWUpO1xuICB9XG5cbiAgaXNXaXphcmROb3RDb21wbGV0ZSh3aXphcmRJZDogc3RyaW5nKSB7XG4gICAgdGhpcy53aXphcmRbd2l6YXJkSWRdLmNvbXBsZXRlZC5uZXh0KGZhbHNlKTtcbiAgfVxuXG4gIHdhdGNoV2l6YXJkQWN0aXZlKHdpemFyZElkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPG51bWJlcj4ge1xuICAgIHJldHVybiB0aGlzLndpemFyZFt3aXphcmRJZF0uYWN0aXZlLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgd2F0Y2hXaXphcmRDb21wbGV0ZWQod2l6YXJkSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8dHJ1ZSB8IGZhbHNlPiB7XG4gICAgcmV0dXJuIHRoaXMud2l6YXJkW3dpemFyZElkXS5jb21wbGV0ZWQuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuXG4gIHJlZ2lzdGVyT3ZlcmxheShpZDogc3RyaW5nLCBzdGF0dXM6IGJvb2xlYW4pIHtcbiAgICB0aGlzLm92ZXJsYXlbaWRdID0ge1xuICAgICAgaWQsXG4gICAgICBzdGF0dXM6IG5ldyBCZWhhdmlvclN1YmplY3Qoc3RhdHVzKVxuICAgIH07XG4gIH1cblxuICBvcGVuT3ZlcmxheShpZDogc3RyaW5nKSB7XG4gICAgY29uc29sZS5sb2coXCJPdmVybGF5P1wiLCB0aGlzLm92ZXJsYXkpO1xuICAgIHRoaXMub3ZlcmxheVtpZF0uc3RhdHVzLm5leHQodHJ1ZSk7XG4gIH1cblxuICBjbG9zZU92ZXJsYXkoaWQ6IHN0cmluZykge1xuICAgIHRoaXMub3ZlcmxheVtpZF0uc3RhdHVzLm5leHQoZmFsc2UpO1xuICB9XG5cbiAgd2F0Y2hPdmVybGF5KGlkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5vdmVybGF5W2lkXS5zdGF0dXMuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICByZWdpc3Rlck1vZGFsKGlkOiBzdHJpbmcsIHN0YXR1czogYm9vbGVhbikge1xuICAgIHRoaXMubW9kYWxbaWRdID0ge1xuICAgICAgaWQsXG4gICAgICBzdGF0dXM6IG5ldyBCZWhhdmlvclN1YmplY3Qoc3RhdHVzKVxuICAgIH07XG4gIH1cblxuICBvcGVuTW9kYWwoaWQ6IHN0cmluZykge1xuICAgIHRoaXMubW9kYWxbaWRdLnN0YXR1cy5uZXh0KHRydWUpO1xuICB9XG5cbiAgY2xvc2VNb2RhbChpZDogc3RyaW5nKSB7XG4gICAgdGhpcy5tb2RhbFtpZF0uc3RhdHVzLm5leHQoZmFsc2UpO1xuICB9XG5cbiAgd2F0Y2hNb2RhbChpZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kYWxbaWRdLnN0YXR1cy5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIHJlZ2lzdGVyRHJvcERvd24oaWQ6IHN0cmluZywgc3RhdHVzOiBib29sZWFuKSB7XG4gICAgdGhpcy5kcm9wZG93bltpZF0gPSB7XG4gICAgICBpZCxcbiAgICAgIHN0YXR1czogbmV3IEJlaGF2aW9yU3ViamVjdChzdGF0dXMpXG4gICAgfTtcbiAgfVxuXG4gIG9wZW5Ecm9wRG93bihpZDogc3RyaW5nKSB7XG4gICAgdGhpcy5kcm9wZG93bltpZF0uc3RhdHVzLm5leHQodHJ1ZSk7XG4gIH1cblxuICBjbG9zZURyb3BEb3duKGlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLmRyb3Bkb3duW2lkXS5zdGF0dXMubmV4dChmYWxzZSk7XG4gIH1cblxuICB3YXRjaERyb3BEb3duKGlkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5kcm9wZG93bltpZF0uc3RhdHVzLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgcmVnaXN0ZXJDb2xsYXBzZShpZDogc3RyaW5nLCBzdGF0dXM6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmNvbGxhcHNlW2lkXSA9IHtcbiAgICAgIGlkLFxuICAgICAgc3RhdHVzOiBuZXcgQmVoYXZpb3JTdWJqZWN0KHN0YXR1cylcbiAgICB9O1xuICB9XG5cbiAgb3BlbkNvbGxhcHNlKGlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLmNvbGxhcHNlW2lkXS5zdGF0dXMubmV4dCh0cnVlKTtcbiAgfVxuXG4gIGNsb3NlQ29sbGFwc2UoaWQ6IHN0cmluZykge1xuICAgIHRoaXMuY29sbGFwc2VbaWRdLnN0YXR1cy5uZXh0KGZhbHNlKTtcbiAgfVxuXG4gIHdhdGNoQ29sbGFwc2UoaWQ6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmNvbGxhcHNlW2lkXS5zdGF0dXMuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBnZXRXaWRnZXRJZChpZDogc3RyaW5nLCB0eXBlOiBzdHJpbmcsIHBhcmVudF9pZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGlkICsgJ18nICsgdHlwZSArICdfJyArIHBhcmVudF9pZDtcbiAgfVxuXG4gIHdpZGdldEV4aXN0cyhpZDogc3RyaW5nLCBwYXJlbnRfdHlwZTogc3RyaW5nLCBwYXJlbnRfaWQ6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLndpZGdldHNbdGhpcy5nZXRXaWRnZXRJZChpZCwgcGFyZW50X3R5cGUsIHBhcmVudF9pZCldID8gdHJ1ZSA6IGZhbHNlO1xuICB9XG5cbiAgcmVnaXN0ZXJXaWRnZXQoaWQ6IHN0cmluZywgcGFyZW50X3R5cGU6IHN0cmluZywgcGFyZW50X2lkOiBzdHJpbmcsIG9wdGlvbnM6IGFueSA9IHt9KSB7XG4gICAgbGV0IG15d2lkZ2V0aWQgPSB0aGlzLmdldFdpZGdldElkKGlkLCBwYXJlbnRfdHlwZSwgcGFyZW50X2lkKTtcbiAgICB0aGlzLndpZGdldHNbbXl3aWRnZXRpZF0gPSB7XG4gICAgICBpZCxcbiAgICAgIHR5cGU6IHBhcmVudF90eXBlLFxuICAgICAgcGFyZW50X2lkOiBwYXJlbnRfaWQsXG4gICAgICBvcHRpb25zOiBuZXcgQmVoYXZpb3JTdWJqZWN0KG9wdGlvbnMpLFxuICAgICAgc3RhdHVzOiBuZXcgQmVoYXZpb3JTdWJqZWN0KGZhbHNlKVxuICAgIH1cbiAgfVxuXG4gIG9wZW5XaWRnZXQoaWQ6IHN0cmluZywgcGFyZW50X3R5cGU6IHN0cmluZywgcGFyZW50X2lkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBsZXQgbXl3aWRnZXRpZCA9IHRoaXMuZ2V0V2lkZ2V0SWQoaWQsIHBhcmVudF90eXBlLCBwYXJlbnRfaWQpO1xuICAgIGlmICh0aGlzLndpZGdldHMgJiYgdGhpcy53aWRnZXRzW215d2lkZ2V0aWRdKSB7XG4gICAgICB0aGlzLndpZGdldHNbbXl3aWRnZXRpZF0uc3RhdHVzLm5leHQodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgY2xvc2VXaWRnZXQoaWQ6IHN0cmluZywgcGFyZW50X3R5cGU6IHN0cmluZywgcGFyZW50X2lkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBsZXQgbXl3aWRnZXRpZCA9IHRoaXMuZ2V0V2lkZ2V0SWQoaWQsIHBhcmVudF90eXBlLCBwYXJlbnRfaWQpO1xuICAgIGlmICh0aGlzLndpZGdldHMgJiYgdGhpcy53aWRnZXRzW215d2lkZ2V0aWRdKSB7XG4gICAgICB0aGlzLndpZGdldHNbbXl3aWRnZXRpZF0uc3RhdHVzLm5leHQoZmFsc2UpO1xuICAgIH1cblxuICB9XG5cbiAgY2xvc2VBbGxQYXJlbnRXaWRnZXRzKHBhcmVudF90eXBlOiBzdHJpbmcsIHBhcmVudF9pZDogc3RyaW5nKSB7XG4gICAgbGV0IGFsbFdpZGdldElkcyA9IE9iamVjdC5rZXlzKHRoaXMud2lkZ2V0cyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxXaWRnZXRJZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLndpZGdldHNbYWxsV2lkZ2V0SWRzW2ldXS50eXBlID09IHBhcmVudF90eXBlICYmIHRoaXMud2lkZ2V0c1thbGxXaWRnZXRJZHNbaV1dLnBhcmVudF9pZCA9PSBwYXJlbnRfaWQpIHtcbiAgICAgICAgdGhpcy5jbG9zZVdpZGdldCh0aGlzLndpZGdldHNbYWxsV2lkZ2V0SWRzW2ldXS5pZCwgcGFyZW50X3R5cGUsIHBhcmVudF9pZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgd2F0Y2hXaWRnZXQoaWQ6IHN0cmluZywgcGFyZW50X3R5cGU6IHN0cmluZywgcGFyZW50X2lkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy53aWRnZXRzW3RoaXMuZ2V0V2lkZ2V0SWQoaWQsIHBhcmVudF90eXBlLCBwYXJlbnRfaWQpXS5zdGF0dXMuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICB3YXRjaE9wdGlvbnMoaWQ6IHN0cmluZywgcGFyZW50X3R5cGU6IHN0cmluZywgcGFyZW50X2lkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLndpZGdldHNbdGhpcy5nZXRXaWRnZXRJZChpZCwgcGFyZW50X3R5cGUsIHBhcmVudF9pZCldLm9wdGlvbnMuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICByZWdpc3Rlck1lZ2FNZW51KGlkOiBzdHJpbmcsIGxpbmtzOiBzdHJpbmdbXSkge1xuICAgIHRoaXMubWVnYW1lbnVbaWRdID0ge1xuICAgICAgaWQsXG4gICAgICBhY3RpdmU6IG5ldyBCZWhhdmlvclN1YmplY3QoXCJcIilcbiAgICB9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlua3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucmVnaXN0ZXJXaWRnZXQobGlua3NbaV0sIFwibWVnYW1lbnVcIiwgaWQpO1xuICAgIH1cbiAgfVxuXG4gIHdhdGNoTWVnYU1lbnUoaWQ6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLm1lZ2FtZW51W2lkXS5hY3RpdmUuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBvcGVuTWVnYU1lbnUoaWQ6IHN0cmluZywgdGFyZ2V0aWQ6IHN0cmluZykge1xuICAgIHRoaXMubWVnYW1lbnVbaWRdLmFjdGl2ZS5uZXh0KHRhcmdldGlkKTtcbiAgICBpZiAodGhpcy53aWRnZXRFeGlzdHModGFyZ2V0aWQsIFwibWVnYW1lbnVcIiwgaWQpKSB7XG4gICAgICB0aGlzLmNsb3NlTWVnYU1lbnUoaWQpO1xuICAgICAgdGhpcy5vcGVuV2lkZ2V0KHRhcmdldGlkLCBcIm1lZ2FtZW51XCIsIGlkKTtcbiAgICB9XG4gIH1cblxuICBjbG9zZU1lZ2FNZW51KGlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLmNsb3NlQWxsUGFyZW50V2lkZ2V0cyhcIm1lZ2FtZW51XCIsIGlkKTtcbiAgICB0aGlzLm1lZ2FtZW51W2lkXS5hY3RpdmUubmV4dChmYWxzZSk7XG4gIH1cblxuICBmYWxsYmFja0NvcHlUZXh0VG9DbGlwYm9hcmQodGV4dDpzdHJpbmcpIHtcbiAgICB2YXIgdGV4dEFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIik7XG4gICAgdGV4dEFyZWEudmFsdWUgPSB0ZXh0O1xuICAgIFxuICAgIC8vIEF2b2lkIHNjcm9sbGluZyB0byBib3R0b21cbiAgICB0ZXh0QXJlYS5zdHlsZS50b3AgPSBcIjBcIjtcbiAgICB0ZXh0QXJlYS5zdHlsZS5sZWZ0ID0gXCIwXCI7XG4gICAgdGV4dEFyZWEuc3R5bGUucG9zaXRpb24gPSBcImZpeGVkXCI7XG4gIFxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGV4dEFyZWEpO1xuICAgIHRleHRBcmVhLmZvY3VzKCk7XG4gICAgdGV4dEFyZWEuc2VsZWN0KCk7XG4gIFxuICAgIHRyeSB7XG4gICAgICB2YXIgc3VjY2Vzc2Z1bCA9IGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5Jyk7XG4gICAgICB2YXIgbXNnID0gc3VjY2Vzc2Z1bCA/ICdzdWNjZXNzZnVsJyA6ICd1bnN1Y2Nlc3NmdWwnO1xuICAgICAgY29uc29sZS5sb2coJ0ZhbGxiYWNrOiBDb3B5aW5nIHRleHQgY29tbWFuZCB3YXMgJyArIG1zZyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWxsYmFjazogT29wcywgdW5hYmxlIHRvIGNvcHknLCBlcnIpO1xuICAgIH1cbiAgXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0ZXh0QXJlYSk7XG4gIH1cbiAgY29weVRvQ2xpcGJvYXJkKHRleHQ6c3RyaW5nKSB7XG4gICAgaWYgKCFuYXZpZ2F0b3IuY2xpcGJvYXJkKSB7XG4gICAgICB0aGlzLmZhbGxiYWNrQ29weVRleHRUb0NsaXBib2FyZCh0ZXh0KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQodGV4dCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdBc3luYzogQ29weWluZyB0byBjbGlwYm9hcmQgd2FzIHN1Y2Nlc3NmdWwhJyk7XG4gICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdBc3luYzogQ291bGQgbm90IGNvcHkgdGV4dDogJywgZXJyKTtcbiAgICB9KTtcbiAgfVxuXG5cblxufVxuIl19