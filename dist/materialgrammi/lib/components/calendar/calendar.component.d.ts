import { EventEmitter, OnChanges, OnInit } from '@angular/core';
import { DaterService } from '../../dater.service';
import { DisabledRange } from '../../interfaces';
import { MaterialgrammiService } from '../../materialgrammi.service';
import * as i0 from "@angular/core";
export declare class CalendarComponent implements OnInit, OnChanges {
    private dater;
    private service;
    abbreviation: boolean;
    bookEvents: boolean;
    theme: string;
    disabled: string[];
    size: number;
    disabledRange: DisabledRange;
    events: any;
    format: string;
    icons: {
        month: {
            next: string;
            previous: string;
        };
        year: {
            next: string;
            previous: string;
        };
    };
    controls: boolean;
    class: string;
    dayIsClicked: EventEmitter<any>;
    dayDrop: EventEmitter<any>;
    newEvent: EventEmitter<any>;
    months_long: any;
    months_short: any;
    months: any;
    weekDays: string[];
    days: any;
    toggleEvent: boolean;
    current: any;
    inView: any;
    toggleSelect: any;
    isHoveredWithData: string;
    id: string;
    activateNewEvent: boolean;
    clickedOn: string;
    bookEvent: {
        name: string;
        description: string;
        on: any;
    };
    droppedData: any;
    dropOnDate: any;
    constructor(dater: DaterService, service: MaterialgrammiService);
    ngOnInit(): void;
    ngOnChanges(): void;
    executeAll(): void;
    initializeStates(): void;
    formatEventDates(): void;
    isDisabled(d: number, m: number, y: number): boolean;
    pushDisabled(d: number, m: number, y: number): void;
    updateDays(year?: number): void;
    isEvented(d: number, m: number, y: number): any;
    doBuzz(eventDetails?: any): boolean;
    getSize(): "padV-10" | "padV-20" | "padV-30" | "padV-40" | "padV-50";
    dayClass(d: number, m: number, y: number, disabled?: boolean): string;
    nextMonth(): void;
    prevMonth(): void;
    nextYear(): void;
    prevYear(): void;
    clickOnDay(d: number, m: number, y: number, disabled?: boolean): void;
    setBookEvent(event: any, type: string): void;
    createNewEvent(): void;
    openNewEvent(): void;
    closeNewEvent(): void;
    updateOnDay(event: any): void;
    handleDropZone(event: any, obj?: any): void;
    dropzoneClass(d: number, m: number, y: number): boolean;
    eventDetailsToggle(d: number, m: number, y: number): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<CalendarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CalendarComponent, "mg-calendar", never, { "abbreviation": "abbreviation"; "bookEvents": "bookEvents"; "theme": "theme"; "disabled": "disabled"; "size": "size"; "disabledRange": "disabledRange"; "events": "events"; "format": "format"; "icons": "icons"; "controls": "controls"; "class": "class"; }, { "dayIsClicked": "dayIsClicked"; "dayDrop": "dayDrop"; "newEvent": "newEvent"; }, never, never>;
}
//# sourceMappingURL=calendar.component.d.ts.map